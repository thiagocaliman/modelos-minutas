/**
 * API para geração automatizada de sentenças trabalhistas
 * 
 * Este módulo fornece funções para gerar modelos de sentenças trabalhistas
 * com base em parâmetros específicos do processo.
 */

const axios = require('axios');
const fs = require('fs');

// Configuração da API
const API_CONFIG = {
  baseURL: 'https://api.sentencas-trabalhistas.com.br',
  apiKey: process.env.API_KEY,
  version: 'v1'
};

/**
 * Cliente para a API de Sentenças Trabalhistas
 */
class SentencaTrabalhistaAPI {
  constructor(config = API_CONFIG) {
    this.client = axios.create({
      baseURL: config.baseURL,
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
  }

  /**
   * Gera uma sentença trabalhista com base nos parâmetros fornecidos
   * 
   * @param {Object} params - Parâmetros do processo
   * @param {string} params.tipoAcao - Tipo de ação (ATSum, ATOrd)
   * @param {string} params.numeroProcesso - Número do processo
   * @param {string} params.autor - Nome do autor da ação
   * @param {string} params.reu - Nome do réu
   * @param {Date} params.dataAdmissao - Data de admissão
   * @param {Date} params.dataDesligamento - Data de desligamento
   * @param {number} params.remuneracao - Valor da remuneração
   * @param {string} params.funcao - Função exercida pelo trabalhador
   * @param {boolean} params.revelia - Indica se houve revelia
   * @param {boolean} params.tutelaAntecipada - Indica se houve tutela antecipada
   * @param {Array} params.verbas - Lista de verbas pleiteadas
   * @param {Object} params.jornadaTrabalho - Informações sobre jornada de trabalho
   * @param {boolean} params.terceirizacao - Indica se é caso de terceirização
   * @returns {Promise<Object>} Sentença gerada
   */
  async gerarSentenca(params) {
    try {
      const response = await this.client.post('/sentencas/gerar', params);
      return response.data;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Obtém um modelo de sentença por ID
   * 
   * @param {string} id - ID do modelo de sentença
   * @returns {Promise<Object>} Modelo de sentença
   */
  async obterModelo(id) {
    try {
      const response = await this.client.get(`/modelos/${id}`);
      return response.data;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Lista os modelos de sentenças disponíveis
   * 
   * @param {Object} filtros - Filtros para a busca
   * @returns {Promise<Array>} Lista de modelos
   */
  async listarModelos(filtros = {}) {
    try {
      const response = await this.client.get('/modelos', { params: filtros });
      return response.data;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Salva uma sentença em formato PDF
   * 
   * @param {Object} sentenca - Dados da sentença
   * @param {string} caminhoArquivo - Caminho para salvar o arquivo
   * @returns {Promise<string>} Caminho do arquivo salvo
   */
  async salvarPDF(sentenca, caminhoArquivo) {
    try {
      const response = await this.client.post('/sentencas/pdf', sentenca, {
        responseType: 'arraybuffer'
      });
      
      fs.writeFileSync(caminhoArquivo, response.data);
      return caminhoArquivo;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Monta um template específico de sentença
   * 
   * @param {string} secao - Nome da seção (REVELIA, VERBAS_RESCISORIAS, etc.)
   * @param {Object} dados - Dados específicos para a seção
   * @returns {Promise<string>} Texto da seção
   */
  async montarSecao(secao, dados) {
    try {
      const response = await this.client.post('/secoes/montar', {
        secao,
        dados
      });
      return response.data.texto;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Calcula os valores das verbas rescisórias
   * 
   * @param {Object} params - Parâmetros para cálculo
   * @returns {Promise<Object>} Valores calculados
   */
  async calcularVerbas(params) {
    try {
      const response = await this.client.post('/calculos/verbas', params);
      return response.data;
    } catch (error) {
      this._handleError(error);
    }
  }

  /**
   * Trata os erros da API
   * 
   * @private
   * @param {Error} error - Erro retornado pela API
   */
  _handleError(error) {
    if (error.response) {
      // Erro retornado pelo servidor
      throw new Error(`Erro na API: ${error.response.status} - ${error.response.data.mensagem || 'Erro desconhecido'}`);
    } else if (error.request) {
      // Sem resposta do servidor
      throw new Error('Erro de comunicação com o servidor');
    } else {
      // Erro na configuração da requisição
      throw error;
    }
  }
}

/**
 * Enumera os tipos de ação disponíveis
 */
const TipoAcao = {
  SUMARIO: 'ATSum',
  ORDINARIO: 'ATOrd'
};

/**
 * Enumera as seções disponíveis em uma sentença
 */
const SecoesSentenca = {
  RELATORIO: 'relatorio',
  REVELIA: 'revelia',
  REVELIA_SUBSIDIARIA: 'revelia_subsidiaria',
  CONFISSAO_FICTA: 'confissao_ficta',
  VERBAS_RESCISORIAS: 'verbas_rescisorias',
  JORNADA_TRABALHO: 'jornada_trabalho',
  INTERVALO_INTERJORNADA: 'intervalo_interjornada',
  INTERVALO_INTRAJORNADA: 'intervalo_intrajornada',
  DANOS_MORAIS: 'danos_morais',
  RESPONSABILIDADE_SUBSIDIARIA: 'responsabilidade_subsidiaria',
  GRATUIDADE_JUSTICA: 'gratuidade_justica',
  HONORARIOS: 'honorarios',
  OFICIOS: 'oficios',
  DEDUCOES: 'deducoes',
  CONCLUSAO: 'conclusao'
};

/**
 * Exemplo de uso da API
 */
async function exemploUso() {
  const api = new SentencaTrabalhistaAPI();
  
  // Exemplo de geração de sentença
  const sentenca = await api.gerarSentenca({
    tipoAcao: TipoAcao.ORDINARIO,
    numeroProcesso: '0001234-12.2023.5.01.0029',
    autor: 'João da Silva',
    reu: 'Empresa XYZ Ltda.',
    dataAdmissao: new Date('2020-01-10'),
    dataDesligamento: new Date('2023-05-20'),
    remuneracao: 3500.00,
    funcao: 'Analista Administrativo',
    revelia: true,
    tutelaAntecipada: true,
    verbas: ['aviso_previo', 'ferias_proporcionais', 'decimo_terceiro', 'fgts'],
    jornadaTrabalho: {
      inicio: '08:30',
      fim: '18:30',
      intervalo: 40, // minutos
      diasSemana: [1, 2, 3, 4, 5] // segunda a sexta
    },
    terceirizacao: false
  });
  
  // Salvar a sentença em PDF
  const arquivoPDF = await api.salvarPDF(sentenca, './sentenca.pdf');
  console.log(`Sentença salva em: ${arquivoPDF}`);
}

module.exports = {
  SentencaTrabalhistaAPI,
  TipoAcao,
  SecoesSentenca
};
